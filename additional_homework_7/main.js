/*- Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів

{
    id: 1,
    name: 'Leanne Graham',
    username: 'Bret',
    email: 'Sincere@april.biz',
    address:{
        street: 'Kulas Light',
        suite: 'Apt. 556',
        city: 'Gwenborough',
        zipcode: '92998-3874',
        geo:   {
               lat: '-37.3159',
               lng: '81.1496'
               }
             },
    phone: '1-770-736-8031 x56442',
    website: 'hildegard.org',
    company: {
        name: 'Romaguera-Crona',
        catchPhrase: 'Multi-layered client-server neural-net',
        bs: 'harness real-time e-markets'
              }
}
*/
class CreateObject {
    constructor(id, name, username, email, street, suite, city, zipcode, lat, lng, phone, website, nameCompany, catchPhrase, bs) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.address = {};
        this.address.street = street;
        this.address.suite = suite;
        this.address.city = city;
        this.address.zipcode = zipcode;
        this.address.geo = {};
        this.address.geo.lat = lat;
        this.address.geo.lng = lng;
        this.phone = phone;
        this.website = website;
        this.company = {};
        this.company.name = nameCompany;
        this.company.catchPhrase = catchPhrase;
        this.company.bs = bs;
    }
}

let obj = new CreateObject(1, `Leanne Graham`, `Bret`, `Sincere@april.biz`, `Kulas Light`,
    `Apt. 556`, `Gwenborough`, `92998-3874`, '-37.3159', '81.1496', '1-770-736-8031 x56442',
    `hildegard.org`, `Romaguera-Crona`, 'Multi-layered client-server neural-net',
    'harness real-time e-markets');

console.log(obj);

/*-  Створити функцію конструктор / клас  який описує об'єкт тегу
Поля :
    -назва тегу ()
- опис його дій
- масив з атрибутами (2-3 атрибути максимум)
Кожен атрибут описати як окремий який буде містити
-назву атрибуту
-опис дії атрибуту
інформацію брати з htmlbook.ru

Таким чином описати теги
-a
-div
-h1
-span
-input
-form
-option
-select
Приклад результуючого об'єкту
{
    titleOfTag: 'area',
    action: `Каждый элемент <area> определяет активные области
         изображения, которые являются ссылками...`,
    attrs: [
           {titleOfAttr: 'accesskey',
           actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
    {/*some props and values},
 //   {...},
 //   {...},
//]
//}*/

class CreateTeg {
    constructor(titleOfTag, action, titleOfAttr1, actionOfAttr1, titleOfAttr2, actionOfAttr2,
                titleOfAttr3, actionOfAttr3) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attrs = [];
        this.attrs[0] = {};
        this.attrs[0].titleOfAttr = titleOfAttr1;
        this.attrs[0].actionOfAttr = actionOfAttr1;
        this.attrs[1] = {};
        this.attrs[1].titleOfAttr = titleOfAttr2;
        this.attrs[1].actionOfAttr = actionOfAttr2;
        this.attrs[2] = {};
        this.attrs[2].titleOfAttr = titleOfAttr3;
        this.attrs[2].actionOfAttr = actionOfAttr3;
    }
}

let aCreate = new CreateTeg(`a`, `Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.
 В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри 
 страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход 
 к закладке внутри веб-страницы.`,
    `coords`, `Устанавливает координаты активной области.`,
    `href`, `Задает адрес документа, на который следует перейти.`,
    `name`, `Устанавливает имя якоря внутри документа.`);

let divCreate = new CreateTeg(`div`, `Элемент <div> является блочным элементом и предназначен для выделения фрагмента
 документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз 
 стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.`,
    `align`, `Задает выравнивание содержимого тега <div>.`,
    `title`, `Добавляет всплывающую подсказку к содержимому.`,
    `class`, `Определяет имя класса, которое позволяет связать тег со стилевым оформлением.`);

let h1Create = new CreateTeg(`h1`, `тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег 
<h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня 
отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше.`,
    `align`, `Определяет выравнивание заголовка`,
    `dir`, `Задает направление и отображение текста — слева направо или справа налево.`,
    `contextmenu`, `Устанавливает контекстное меню для элемента.`);

let spanCreate = new CreateTeg(`span`, `Тег <span> предназначен для определения строчных элементов документа.
 В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри 
 других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, 
 если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри 
 тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.`,
    `contenteditable`, `Сообщает, что элемент доступен для редактирования пользователем.`,
    `hidden`, `Скрывает содержимое элемента от просмотра.`,
    `id`, `Указывает имя стилевого идентификатора.`);

let inputCreate = new CreateTeg(`input`, `Тег <input> является одним из разносторонних элементов формы и 
позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен 
для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь 
контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их 
обрабатывает серверная программа, то указывать <form> обязательно.`,
    `type`, `Определяет вид элемента`,
    `accept`, `Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.`,
    `autocomplete`, `Включает или отключает автозаполнение.`);

let formCreate = new CreateTeg(`form`, `Тег <form> устанавливает форму на веб-странице. Форма предназначена 
для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью 
клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.`,
    `accept-charset`, `Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.`,
    `action`, `Адрес программы или документа, который обрабатывает данные формы.`,
    `enctype`, `Способ кодирования данных формы.`);

let optionCreate = new CreateTeg(`option`, `Тег <option> определяет отдельные пункты списка, создаваемого с 
помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может 
изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> 
внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.`,
    `disabled`, `Заблокировать для доступа элемент списка.`,
    `label`, `Указание метки пункта списка.`,
    `selected`, `Заранее устанавливает определенный пункт списка выделенным.`);

let selectCreate = new CreateTeg(`select`, `Тег <select> позволяет создать элемент интерфейса в виде 
раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования
 атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным 
 в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть 
 вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь
  формы. Это также необходимо, когда к данным списка идет обращение через скрипты.`,
    `multiple`, `Позволяет одновременно выбирать сразу несколько элементов списка.`,
    `size`, `Количество отображаемых строк списка.`,
    `autofocus`, `Устанавливает, что список получает фокус после загрузки страницы.`);

console.log(aCreate);
console.log(divCreate);
console.log(h1Create);
console.log(spanCreate);
console.log(inputCreate);
console.log(formCreate);
console.log(optionCreate);
console.log(selectCreate);